{"title":"单例模式","uid":"5e422a9b2c69bd7294ec71b84cbbb53b","slug":"单例模式","date":"2022-12-12T09:34:25.000Z","updated":"2022-12-12T09:34:36.947Z","comments":true,"path":"api/articles/单例模式.json","keywords":null,"cover":null,"content":"<h4 id=\"1-懒汉式\"><a href=\"#1-懒汉式\" class=\"headerlink\" title=\"1. 懒汉式\"></a>1. 懒汉式</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>线程不安全，延迟初始化，严格意义上不是不是单例模式</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Singleton &#123;  \n    private static Singleton instance;  \n    private Singleton ()&#123;&#125;  \n  \n    public static Singleton getInstance() &#123;  \n    if (instance &#x3D;&#x3D; null) &#123;  \n        instance &#x3D; new Singleton();  \n    &#125;  \n    return instance;  \n    &#125;  \n&#125;</code></pre>\n\n<h4 id=\"2-饿汉式\"><a href=\"#2-饿汉式\" class=\"headerlink\" title=\"2. 饿汉式\"></a>2. 饿汉式</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>线程安全，比较常用，但容易产生垃圾，因为一开始就初始化</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Singleton &#123;  \n    private static Singleton instance &#x3D; new Singleton();  \n    private Singleton ()&#123;&#125;  \n    public static Singleton getInstance() &#123;  \n    return instance;  \n    &#125;  \n&#125;\n</code></pre>\n\n<h4 id=\"3-懒汉式（双重检查加锁版本）\"><a href=\"#3-懒汉式（双重检查加锁版本）\" class=\"headerlink\" title=\"3. 懒汉式（双重检查加锁版本）\"></a>3. 懒汉式（双重检查加锁版本）</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Singleton &#123;\n\n    &#x2F;&#x2F;volatile保证，当uniqueInstance变量被初始化成Singleton实例时，多个线程可以正确处理uniqueInstance变量\n    private volatile static Singleton uniqueInstance;\n    private Singleton() &#123;\n    &#125;\n    public static Singleton getInstance() &#123;\n       &#x2F;&#x2F;检查实例，如果不存在，就进入同步代码块\n        if (uniqueInstance &#x3D;&#x3D; null) &#123;\n            &#x2F;&#x2F;只有第一次才彻底执行这里的代码\n            synchronized(Singleton.class) &#123;\n               &#x2F;&#x2F;进入同步代码块后，再检查一次，如果仍是null，才创建实例\n                if (uniqueInstance &#x3D;&#x3D; null) &#123;\n                    uniqueInstance &#x3D; new Singleton();\n                &#125;\n            &#125;\n        &#125;\n        return uniqueInstance;\n    &#125;\n&#125;</code></pre>\n\n<h4 id=\"4-静态内部类单例模式\"><a href=\"#4-静态内部类单例模式\" class=\"headerlink\" title=\"4. 静态内部类单例模式\"></a>4. 静态内部类单例模式</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Singleton &#123; \n    private Singleton()&#123;\n    &#125;\n      public static Singleton getInstance()&#123;  \n        return Inner.instance;  \n    &#125;  \n    private static class Inner &#123;  \n        private static final Singleton instance &#x3D; new Singleton();  \n    &#125;  \n&#125; </code></pre>\n\n<h4 id=\"5-枚举单例模式\"><a href=\"#5-枚举单例模式\" class=\"headerlink\" title=\"5. 枚举单例模式\"></a>5. 枚举单例模式</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public enum Singleton &#123;\n    INSTANCE;\n&#125;</code></pre>\n\n\n\n\n\n","feature":true,"text":"1. 懒汉式 线程不安全，延迟初始化，严格意义上不是不是单例模式 public class Singleton &#123; private static Singleton instance; private Singleton ()&#123;&#125; public st...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":1,"path":"api/categories/设计模式.json"}],"tags":[{"name":"单例模式","slug":"单例模式","count":1,"path":"api/tags/单例模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%87%92%E6%B1%89%E5%BC%8F\"><span class=\"toc-text\">1. 懒汉式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E9%A5%BF%E6%B1%89%E5%BC%8F\"><span class=\"toc-text\">2. 饿汉式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%87%92%E6%B1%89%E5%BC%8F%EF%BC%88%E5%8F%8C%E9%87%8D%E6%A3%80%E6%9F%A5%E5%8A%A0%E9%94%81%E7%89%88%E6%9C%AC%EF%BC%89\"><span class=\"toc-text\">3. 懒汉式（双重检查加锁版本）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">4. 静态内部类单例模式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E6%9E%9A%E4%B8%BE%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">5. 枚举单例模式</span></a></li></ol>","author":{"name":"Ganncus","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"咕咕咕咕咕咕","socials":{"github":"https://github.com/gannikus","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"微服务","uid":"4323338174440016aba5335d086cc950","slug":"microService","date":"2022-12-09T05:46:25.000Z","updated":"2022-12-09T12:32:40.517Z","comments":true,"path":"api/articles/microService.json","keywords":null,"cover":[],"text":"常见面试题1.微服务篇1.1.SpringCloud常见组件有哪些？问题说明：这个题目主要考察对SpringCloud的组件基本了解 难易程度：简单 参考话术： SpringCloud包含的组件很多，有很多功能是重复的。其中最常用组件包括： •注册中心组件：Eureka、Naco...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"面试题","slug":"面试题","count":1,"path":"api/categories/面试题.json"}],"tags":[{"name":"微服务","slug":"微服务","count":1,"path":"api/tags/微服务.json"},{"name":"Nacos","slug":"Nacos","count":1,"path":"api/tags/Nacos.json"},{"name":"SpringCloud","slug":"SpringCloud","count":1,"path":"api/tags/SpringCloud.json"}],"author":{"name":"Ganncus","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"咕咕咕咕咕咕","socials":{"github":"https://github.com/gannikus","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}